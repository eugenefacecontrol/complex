# Specify a base image
FROM nginx

# Override the existing file
COPY ./default.conf /etc/nginx/conf.d/default.conf

# https://www.udemy.com/course/docker-and-kubernetes-the-complete-guide/learn/lecture/11436998#questions/14297316
# We are specifying that the USER which will execute RUN, CMD, or ENTRYPOINT instructions will be the node user, as opposed to root (default).
# USER node

# -p means to not print errors if exist and to create parent folder if neccessary
# RUN mkdir -p /home/node/app

# Use this as working directory. Actually, new NodeJS forbids locating files in the root directory, so this command is neccessary
# We are then creating a directory of /home/node/app prior to the WORKDIR instruction. This will prevent a permissions issue since WORKDIR by default will create a directory if it does not exist and set ownership to root.
# WORKDIR /home/node/app

# Copy only one file to the working folder in the container to make sure the next command will run from cashe if dockerfile for example will be changed
# The inline chown commands will set ownership of the files you are copying from your local environment to the node user in the container.
# COPY --chown=node:node ./package.json ./

# Install some dependencies 
# RUN npm install

# Copy all files from current folder to the working folder in the container
# COPY --chown=node:node ./ ./

# Default command
# CMD ["nginx", "-g", "daemon off;"]