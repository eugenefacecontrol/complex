# Specify a scope of objects we can create:
# v1: componentStatus, configMap, Endpoints, Event, Namespace, Pod etc.
# apps/v1: ControllerRevision, StatefulSet, Development
apiVersion: apps/v1
# There are several types of created objects: StatefulSet, ReplicaController, Pod - running one container or more, Service - setting up networking, Deployment - maintains a set of identical pods, ensuring that they have the correct config and that the right number exists.
kind: Deployment
metadata:
  name: postgres-deployment
spec:
  # Namber of identical pods to make:
  replicas: 1
  # We use selector, because we reaching to the kube api and ask master to create a Pod object
  selector:
    matchLabels:
      # That's how postgres-pod is linked to the postgres-node-port. The key/value can be anything: key: value
      component: postgres
  # All the created Pods need to be of the exact format (identical):
  template:
    metadata:
      labels:
        component: postgres
    spec:
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            # Name of the storage config
            claimName: database-persistent-volume-claim
      containers:
        - name: postgres
          image: postgres
          ports:
            - containerPort: 5432
          # Return to the spec > volumes > name and find storage with the following names and use specified storage
          volumeMounts:
            - name: postgres-storage
              # What we want to save to the persistent volume. Default path to the postgres data:
              mountPath: /var/lib/postgresql/data
              # It will be stored in the following folder in the persistent volume. For postgres it's necessary
              subPath: postgres